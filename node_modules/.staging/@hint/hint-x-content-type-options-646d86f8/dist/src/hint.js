"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const normalize_string_1 = require("hint/dist/src/lib/utils/misc/normalize-string");
const is_data_uri_1 = require("hint/dist/src/lib/utils/network/is-data-uri");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const debug = debug_1.debug(__filename);
class XContentTypeOptionsHint {
    constructor(context) {
        const isHeaderRequired = (element) => {
            if (!element) {
                return false;
            }
            const nodeName = normalize_string_1.default(element.nodeName);
            if (nodeName === 'script') {
                return true;
            }
            if (nodeName === 'link') {
                const relValues = (normalize_string_1.default(element.getAttribute('rel'), '')).split(' ');
                return relValues.includes('stylesheet');
            }
            return false;
        };
        const validate = async ({ element, resource, response }) => {
            if (is_data_uri_1.default(resource)) {
                debug(`Check does not apply for data URI: ${resource}`);
                return;
            }
            const headerValue = normalize_string_1.default(response.headers && response.headers['x-content-type-options']);
            if (isHeaderRequired(element)) {
                if (headerValue === null) {
                    await context.report(resource, `Response should include 'x-content-type-options' header.`, { element });
                    return;
                }
                if (headerValue !== 'nosniff') {
                    await context.report(resource, `'x-content-type-options' header value should be 'nosniff', not '${headerValue}'.`, { element });
                    return;
                }
                return;
            }
            if (headerValue) {
                await context.report(resource, `Response should not include unneeded 'x-content-type-options' header.`, { element });
            }
        };
        context.on('fetch::end::*', validate);
    }
}
XContentTypeOptionsHint.meta = {
    docs: {
        category: category_1.Category.security,
        description: `Require 'X-Content-Type-Options' header`
    },
    id: 'x-content-type-options',
    schema: [],
    scope: hintscope_1.HintScope.site
};
exports.default = XContentTypeOptionsHint;
