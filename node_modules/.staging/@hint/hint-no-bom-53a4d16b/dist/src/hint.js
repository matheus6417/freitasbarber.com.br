"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const async_wrapper_1 = require("hint/dist/src/lib/utils/async-wrapper");
const content_type_1 = require("hint/dist/src/lib/utils/content-type");
const is_regular_protocol_1 = require("hint/dist/src/lib/utils/network/is-regular-protocol");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const debug = debug_1.debug(__filename);
class default_1 {
    constructor(context) {
        const validateFetchEnd = async (fetchEnd) => {
            debug(`Validating hint no-bom`);
            const { resource, element } = fetchEnd;
            if (!is_regular_protocol_1.default(resource) || !content_type_1.isTextMediaType(fetchEnd.response.mediaType)) {
                return;
            }
            const safeFetch = async_wrapper_1.asyncTry(context.fetchContent.bind(context));
            const request = await safeFetch(resource);
            if (!request) {
                await context.report(resource, 'Content could not be fetched.', { element });
                debug(`Error requesting the resource: ${resource}`);
                return;
            }
            const content = request.response.body.rawContent;
            if (content[0] === 0xEF &&
                content[1] === 0xBB &&
                content[2] === 0xBF) {
                await context.report(resource, `Text-based resource should not start with BOM character.`, { element });
            }
        };
        context.on('fetch::end::*', validateFetchEnd);
    }
}
default_1.meta = {
    docs: {
        category: category_1.Category.interoperability,
        description: `Warns against using the BOM (byte-order marker) character at the beginning of a text based file`
    },
    id: 'no-bom',
    schema: [],
    scope: hintscope_1.HintScope.any
};
exports.default = default_1;
