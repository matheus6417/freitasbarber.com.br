"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mock = require("mock-require");
const generate_html_page_1 = require("hint/dist/src/lib/utils/misc/generate-html-page");
exports.OkayMaxAge = 31536000;
exports.smallMaxAge = 1;
exports.defaultMinimum = 10886400;
exports.stsHeader = 'strict-transport-security';
exports.maxAgeOnlyHeader = { [exports.stsHeader]: `max-age=${exports.OkayMaxAge}` };
exports.includeSubDomainsHeader = { [exports.stsHeader]: `max-age=${exports.OkayMaxAge}; includeSubDomains` };
exports.preloadHeader = { [exports.stsHeader]: `max-age=${exports.OkayMaxAge}; includeSubDomains; preload` };
exports.mixCaseHeader = { [exports.stsHeader]: `Max-Age=${exports.OkayMaxAge}` };
exports.quotedStringHeader = { [exports.stsHeader]: `max-age="${exports.OkayMaxAge}"; includeSubDomains; preload` };
exports.tooShortHeader = { [exports.stsHeader]: `max-age=${exports.smallMaxAge}` };
exports.noMaxAgeHeader = { [exports.stsHeader]: `maxage=${exports.OkayMaxAge}; includeSubDomains; preload` };
exports.multipleMaxAgeHeader = { [exports.stsHeader]: `max-age=${exports.OkayMaxAge}; max-age=${exports.OkayMaxAge + 1}` };
exports.multipleincludeSubDomainsHeader = { [exports.stsHeader]: `includeSubDomains; max-age=${exports.OkayMaxAge}; includeSubDomains` };
exports.wrongDelimiterHeader = { [exports.stsHeader]: `max-age=${exports.OkayMaxAge}, includeSubDomains; preload` };
exports.includeUnitMaxAgeHeader = { [exports.stsHeader]: `max-age=${exports.OkayMaxAge}s; includeSubDomains; preload` };
exports.notPreloadableError = `www subdomain does not support HTTPS`;
exports.preloaded = { status: 'preloaded' };
exports.unknown = { status: 'unknown' };
exports.noErrors = { errors: [] };
exports.hasErrors = { errors: [{ message: exports.notPreloadableError }] };
exports.generateTooShortError = (value) => {
    return `'${exports.stsHeader}' header 'max-age' value should be more than ${value}`;
};
exports.noHeaderError = `'${exports.stsHeader}' header was not specified`;
exports.noMaxAgeError = `'${exports.stsHeader}' header requires 'max-age' directive`;
exports.multipleMaxAgeError = `'${exports.stsHeader}' header contains more than one 'max-age'`;
exports.multipleincludeSubDomainsError = `'${exports.stsHeader}' header contains more than one 'includesubdomains'`;
exports.tooShortErrorDefault = exports.generateTooShortError(exports.defaultMinimum);
exports.DelimiterwrongFormatError = `'${exports.stsHeader}' header has the wrong format: max-age=31536000, includesubdomains`;
exports.UnitwrongFormatError = `'${exports.stsHeader}' header has the wrong format: max-age=31536000s`;
exports.statusServiceError = `Error with getting preload status for https://localhost/.`;
exports.preloadableServiceError = `Error with getting preload eligibility for https://localhost/.`;
exports.problemWithVerificationEndpoint = `Error with getting preload status for https://localhost/. There might be something wrong with the verification endpoint.`;
exports.faviconHeaderMaxAgeOnly = {
    '/': { content: generate_html_page_1.default() },
    '/favicon.ico': { headers: { [exports.stsHeader]: `max-age=${exports.OkayMaxAge + 100}` } }
};
exports.generateHTMLPageData = (content) => {
    return {
        content,
        headers: exports.maxAgeOnlyHeader
    };
};
exports.htmlPageWithScriptData = exports.generateHTMLPageData(generate_html_page_1.default(undefined, '<script src="test.js"></script>'));
exports.htmlPageWithManifestData = exports.generateHTMLPageData(generate_html_page_1.default('<link rel="manifest" href="test.webmanifest">'));
exports.requestJSONAsyncMock = (responseObject) => {
    const isDataURI = {
        default() {
            return false;
        }
    };
    const isHTTPS = {
        default() {
            return true;
        }
    };
    const isRegularProtocol = {
        default() {
            return true;
        }
    };
    const normalizeString = {
        default(str = '') {
            return str.toLowerCase();
        }
    };
    const requestJSONAsync = {
        default(uri) {
            let response;
            if (uri.includes('/api/v2/preloadable')) {
                response = responseObject.preloadable;
            }
            else {
                response = responseObject.status;
            }
            if (!response) {
                return Promise.reject('Error with the verification service.');
            }
            return Promise.resolve(response);
        }
    };
    mock('hint/dist/src/lib/utils/network/is-data-uri', isDataURI);
    mock('hint/dist/src/lib/utils/network/is-https', isHTTPS);
    mock('hint/dist/src/lib/utils/network/is-regular-protocol', isRegularProtocol);
    mock('hint/dist/src/lib/utils/misc/normalize-string', normalizeString);
    mock('hint/dist/src/lib/utils/network/request-json-async', requestJSONAsync);
};
