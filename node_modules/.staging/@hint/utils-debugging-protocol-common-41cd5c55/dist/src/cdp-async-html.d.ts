import { Crdp } from 'chrome-remote-debug-protocol';
import { IAsyncHTMLDocument, IAsyncHTMLElement } from 'hint/dist/src/lib/types/async-html';
import { ProblemLocation } from 'hint/dist/src/lib/types';
export declare class CDPAsyncHTMLDocument implements IAsyncHTMLDocument {
    private _DOM;
    private _dom;
    private _nodes;
    private _outerHTML;
    constructor(DOM: Crdp.DOMClient);
    private trackNodes;
    private getHTMLChildren;
    querySelectorAll(selector: string): Promise<AsyncHTMLElement[]>;
    pageHTML(): Promise<string>;
    load(): Promise<void>;
    readonly root: Crdp.DOM.Node;
}
export declare const createCDPAsyncHTMLDocument: (DOM: Crdp.DOMClient) => Promise<CDPAsyncHTMLDocument>;
export declare class AsyncHTMLElement implements IAsyncHTMLElement {
    protected _htmlelement: Crdp.DOM.Node;
    private _ownerDocument;
    private _DOM;
    private _outerHTML;
    private _attributesArray;
    private _attributesMap;
    constructor(htmlelement: Crdp.DOM.Node, ownerDocument: CDPAsyncHTMLDocument, DOM: Crdp.DOMClient);
    private initializeAttributes;
    getAttribute(name: string): string | null;
    getLocation(): ProblemLocation | null;
    isSame(element: AsyncHTMLElement): boolean;
    outerHTML(): Promise<string>;
    readonly attributes: {
        name: string;
        value: string;
    }[];
    readonly children: Crdp.DOM.Node[];
    readonly nodeName: string;
    readonly ownerDocument: IAsyncHTMLDocument;
}
