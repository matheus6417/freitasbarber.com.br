/// <reference types="node" />
import { URL } from 'url';
import { CDPAsyncHTMLDocument, AsyncHTMLElement } from './cdp-async-html';
import { IConnector, ILauncher, NetworkData } from 'hint/dist/src/lib/types';
import { Engine } from 'hint/dist/src/lib/engine';
export declare class Connector implements IConnector {
    private _options;
    private _headers;
    private _href;
    private _finalHref;
    private _server;
    private _client;
    private _requests;
    private _errorWithPage;
    private _dom;
    private _pendingResponseReceived;
    private _tabs;
    private _timeout;
    private _pid;
    private _targetNetworkData;
    private _launcher;
    private _waitForTarget;
    private _targetReceived;
    constructor(engine: Engine, config: object, launcher: ILauncher);
    private getElementFromParser;
    private getElementFromRequest;
    private onRequestWillBeSent;
    private onLoadingFailed;
    private emitFetchEnd;
    private onResponseReceived;
    private onLoadingFinished;
    private traverseAndNotify;
    private getClient;
    private initiateComms;
    private onError;
    private onDisconnect;
    private enableNetworkEvents;
    private configureAndEnableCDP;
    private getFavicon;
    private processPendingResponses;
    private onLoadEventFired;
    collect(target: URL): Promise<{}>;
    private isClosed;
    close(): Promise<void>;
    fetchContent(target: URL | string, customHeaders?: object): Promise<NetworkData>;
    private wrapRuntimeEvalErrorInBrowser;
    evaluate(code: string): Promise<any>;
    querySelectorAll(selector: string): Promise<AsyncHTMLElement[]>;
    readonly dom: CDPAsyncHTMLDocument | undefined;
    readonly headers: import("hint/dist/src/lib/types/network").HttpHeaders | undefined;
    readonly html: Promise<string>;
}
