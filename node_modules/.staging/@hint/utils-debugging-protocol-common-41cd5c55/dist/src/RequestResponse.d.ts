import { Crdp } from 'chrome-remote-debug-protocol';
import { Response } from 'hint/dist/src/lib/types';
import { AsyncHTMLElement } from './cdp-async-html';
export declare enum RequestStatus {
    willBeSent = "willBeSent",
    responseReceived = "responseReceived",
    loadingFinished = "loadingFinished",
    loadingFailed = "loadingFailed"
}
export declare class RequestResponse {
    private _overrideInvalidCert;
    private _network;
    private _requestId;
    readonly requestId: string;
    private _status;
    readonly status: RequestStatus;
    private _hops;
    readonly hops: string[];
    private _originalUrl;
    readonly originalUrl: string;
    readonly finalUrl: string;
    private _willBeSent;
    readonly willBeSent: Crdp.Network.RequestWillBeSentEvent;
    private _responseReceived;
    readonly responseReceived: Crdp.Network.ResponseReceivedEvent | undefined;
    private _loadingFinished;
    readonly loadingFinished: Crdp.Network.LoadingFinishedEvent | undefined;
    private _loadingFailed;
    readonly loadingFailed: Crdp.Network.LoadingFailedEvent | undefined;
    private _responseBody;
    readonly responseBody: Crdp.Network.GetResponseBodyResponse | undefined;
    private fetchContent;
    private _rawResponse;
    private getRawResponse;
    private _response;
    getResponse(element: AsyncHTMLElement | null): Response;
    private logInfo;
    updateRequestWillBeSent(event: Crdp.Network.RequestWillBeSentEvent): void;
    updateResponseReceived(event: Crdp.Network.ResponseReceivedEvent): void;
    updateLoadingFinished(event: Crdp.Network.LoadingFinishedEvent): Promise<void>;
    updateLoadingFailed(event: Crdp.Network.LoadingFailedEvent): void;
    constructor(network: Crdp.NetworkClient, event: Crdp.Network.RequestWillBeSentEvent, overrideInvalidCert: boolean);
}
