"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const punycode_1 = require("punycode");
const category_1 = require("hint/dist/src/lib/enums/category");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
class ManifestAppNameHint {
    constructor(context) {
        const checkIfPropertyExists = async (resource, content, propertyName) => {
            if (typeof content === 'undefined') {
                await context.report(resource, `Web app manifest should have '${propertyName}' property.`);
            }
        };
        const checkIfPropertyValueIsNotEmpty = async (resource, content, propertyName, getLocation) => {
            if (typeof content === 'string' && (content.trim() === '')) {
                const message = `Web app manifest should have non-empty '${propertyName}' property value.`;
                const location = getLocation(propertyName);
                await context.report(resource, message, { location });
            }
        };
        const checkIfPropertyValueIsUnderLimit = async (resource, content, propertyName, shortNameLengthLimit, getLocation) => {
            if (content && (punycode_1.ucs2.decode(content).length > shortNameLengthLimit)) {
                const message = `Web app manifest should have '${propertyName}' property value under ${shortNameLengthLimit} characters.`;
                const location = getLocation(propertyName);
                await context.report(resource, message, { location });
                return false;
            }
            return true;
        };
        const validate = async ({ getLocation, parsedContent: manifest, resource }) => {
            const name = manifest.name;
            const nameLengthLimit = 30;
            const shortNameLengthLimit = 12;
            await checkIfPropertyExists(resource, name, 'name');
            await checkIfPropertyValueIsNotEmpty(resource, name, 'name', getLocation);
            await checkIfPropertyValueIsUnderLimit(resource, name, 'name', nameLengthLimit, getLocation);
            const shortName = manifest.short_name;
            const shortNameIsRequired = typeof name === 'string' && (name.trim() !== '') && (punycode_1.ucs2.decode(name).length > shortNameLengthLimit);
            if (!shortName && !shortNameIsRequired) {
                return;
            }
            await checkIfPropertyExists(resource, shortName, 'short_name');
            await checkIfPropertyValueIsNotEmpty(resource, shortName, 'short_name', getLocation);
            await checkIfPropertyValueIsUnderLimit(resource, shortName, 'short_name', shortNameLengthLimit, getLocation);
        };
        context.on('parse::end::manifest', validate);
    }
}
ManifestAppNameHint.meta = {
    docs: {
        category: category_1.Category.pwa,
        description: 'Require web application name to be specified in the web app manifest file'
    },
    id: 'manifest-app-name',
    schema: [],
    scope: hintscope_1.HintScope.any
};
exports.default = ManifestAppNameHint;
