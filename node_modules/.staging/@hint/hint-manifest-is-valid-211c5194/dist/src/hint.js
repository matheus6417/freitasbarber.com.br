"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bcp47_1 = require("bcp47");
const color_string_1 = require("color-string");
const category_1 = require("hint/dist/src/lib/enums/category");
const caniuse_1 = require("hint/dist/src/lib/utils/caniuse");
const normalize_string_1 = require("hint/dist/src/lib/utils/misc/normalize-string");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
class ManifestIsValidHint {
    constructor(context) {
        const targetedBrowsers = context.targetedBrowsers.join();
        const isNotSupportedColorValue = (color, normalizedColorValue) => {
            const hexWithAlphaRegex = /^#([0-9a-fA-F]{4}){1,2}$/;
            return (color.model === 'rgb' &&
                hexWithAlphaRegex.test(normalizedColorValue) &&
                !caniuse_1.isSupported('css-rrggbbaa', targetedBrowsers)) ||
                color.model === 'hwb';
        };
        const checkColors = async (resource, manifest, getLocation) => {
            const colorProperties = [
                'background_color',
                'theme_color'
            ];
            for (const property of colorProperties) {
                const colorValue = manifest[property];
                const normalizedColorValue = normalize_string_1.default(colorValue, '');
                if (!normalizedColorValue) {
                    continue;
                }
                const color = color_string_1.get(normalizedColorValue);
                if (color === null) {
                    const location = getLocation(property);
                    const message = `Web app manifest should not have invalid value '${colorValue}' for property '${property}'.`;
                    await context.report(resource, message, { location });
                    continue;
                }
                if (isNotSupportedColorValue(color, normalizedColorValue)) {
                    const location = getLocation(property);
                    const message = `Web app manifest should not have unsupported value '${colorValue}' for property '${property}'.`;
                    await context.report(resource, message, { location });
                }
            }
        };
        const checkLang = async (resource, manifest, getLocation) => {
            const lang = manifest.lang;
            if (lang && !bcp47_1.parse(lang)) {
                const location = getLocation('lang');
                const message = `Web app manifest should not have invalid value '${manifest.lang}' for property 'lang'.`;
                await context.report(resource, message, { location });
            }
        };
        const handleInvalidJSON = async (manifestInvalidJSON) => {
            const { resource } = manifestInvalidJSON;
            await context.report(resource, `Web app manifest should contain valid JSON.`);
        };
        const handleInvalidSchema = async (manifestInvalidSchemaEvent) => {
            for (let i = 0; i < manifestInvalidSchemaEvent.prettifiedErrors.length; i++) {
                const error = manifestInvalidSchemaEvent.prettifiedErrors[i];
                const location = manifestInvalidSchemaEvent.errors[i].location;
                await context.report(manifestInvalidSchemaEvent.resource, error, { location });
            }
        };
        const validateOtherProperties = async (manifestParsed) => {
            const { getLocation, parsedContent: manifest, resource } = manifestParsed;
            await checkLang(resource, manifest, getLocation);
            await checkColors(resource, manifest, getLocation);
        };
        context.on('parse::end::manifest', validateOtherProperties);
        context.on('parse::error::manifest::json', handleInvalidJSON);
        context.on('parse::error::manifest::schema', handleInvalidSchema);
    }
}
ManifestIsValidHint.meta = {
    docs: {
        category: category_1.Category.pwa,
        description: 'Require valid web app manifest'
    },
    id: 'manifest-is-valid',
    schema: [],
    scope: hintscope_1.HintScope.any
};
exports.default = ManifestIsValidHint;
