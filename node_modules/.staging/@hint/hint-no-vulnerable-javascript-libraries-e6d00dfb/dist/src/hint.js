"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const util_1 = require("util");
const lodash_1 = require("lodash");
const semver = require("semver");
const category_1 = require("hint/dist/src/lib/enums/category");
const logger = require("hint/dist/src/lib/utils/logging");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const types_1 = require("hint/dist/src/lib/types");
const load_json_file_1 = require("hint/dist/src/lib/utils/fs/load-json-file");
const read_file_async_1 = require("hint/dist/src/lib/utils/fs/read-file-async");
const write_file_async_1 = require("hint/dist/src/lib/utils/fs/write-file-async");
const request_async_1 = require("hint/dist/src/lib/utils/network/request-async");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const debug = debug_1.debug(__filename);
class NoVulnerableJavascriptLibrariesHint {
    constructor(context) {
        let minimumSeverity = 'low';
        const createScript = async () => {
            debug('Creating script to inject');
            const libraryDetector = await read_file_async_1.default(require.resolve('js-library-detector/library/libraries.js'));
            const script = `(function (){
                ${libraryDetector};

                const libraries = Object.entries(d41d8cd98f00b204e9800998ecf8427e_LibraryDetectorTests);
                const detectedLibraries = libraries.reduce((detected, [name, lib]) => {
                    try {
                        const result = lib.test(window);
                        if (result) {
                            detected.push({
                                name,
                                version: result.version,
                                npmPkgName: lib.npm
                            });
                        }
                    }
                    catch (e) {}

                    return detected;
                }, []);

                return detectedLibraries;
            }())`;
            return script;
        };
        const loadSnyk = async () => {
            const oneDay = 3600000 * 24;
            const now = Date.now();
            const snykDBPath = path.join(__dirname, 'snyk-snapshot.json');
            let snykStat;
            try {
                snykStat = await util_1.promisify(fs.stat)(snykDBPath);
                const modified = new Date(snykStat.mtime).getTime();
                if (now - modified > oneDay) {
                    debug('snkyDB is older than 24h.');
                    debug('Updating snykDB');
                    const res = await request_async_1.default('https://snyk.io/partners/api/v2/vulndb/clientside.json');
                    await write_file_async_1.default(snykDBPath, res);
                }
            }
            catch (e) {
                debug(e);
                debug(`Error loading snyk's data`);
            }
            return load_json_file_1.default(snykDBPath);
        };
        const reportLibrary = async (library, vulns, resource) => {
            let vulnerabilities = vulns;
            debug('Filtering vulnerabilities');
            vulnerabilities = vulnerabilities.filter((vulnerability) => {
                const { severity } = vulnerability;
                let fails = false;
                switch (minimumSeverity) {
                    case 'medium':
                        fails = severity === 'medium' || severity === 'high';
                        break;
                    case 'high':
                        fails = severity === 'high';
                        break;
                    default:
                        fails = true;
                        break;
                }
                return fails;
            });
            if (vulnerabilities.length === 0) {
                return;
            }
            const vulnerabilitiesBySeverity = lodash_1.groupBy(vulnerabilities, 'severity');
            const link = `https://snyk.io/vuln/${vulnerabilities[0].packageManager}:${vulnerabilities[0].packageName}`;
            const detail = Object.entries(vulnerabilitiesBySeverity).map(([severity, entries]) => {
                return `${entries.length} ${severity}`;
            })
                .join(', ');
            if (detail) {
                await context.report(resource, `'${library.name}@${library.version}' has ${vulnerabilities.length} known ${vulnerabilities.length === 1 ? 'vulnerability' : 'vulnerabilities'} (${detail}). See '${link}' for more information.`);
            }
        };
        const removeTagsFromVersion = (version) => {
            const match = (/(\d+\.?)+/).exec(version);
            return match && match[0];
        };
        const detectAndReportVulnerableLibraries = async (libraries, resource) => {
            const snykDB = await loadSnyk();
            for (const lib of libraries) {
                const snykInfo = snykDB.npm[lib.npmPkgName];
                if (!snykInfo) {
                    continue;
                }
                const vulnerabilities = snykInfo.reduce((vulns, vuln) => {
                    const version = removeTagsFromVersion(lib.version) || '';
                    try {
                        if (semver.satisfies(version, vuln.semver.vulnerable[0])) {
                            vulns.push(vuln);
                        }
                    }
                    catch (e) {
                        logger.error(`Version ${version} of ${lib.name} isn't semver compliant`);
                    }
                    return vulns;
                }, []);
                await reportLibrary(lib, vulnerabilities, resource);
            }
        };
        const validateLibraries = async (canEvaluateScript) => {
            const script = await createScript();
            const resource = canEvaluateScript.resource;
            let detectedLibraries;
            try {
                detectedLibraries = (await context.evaluate(script));
            }
            catch (e) {
                let message;
                if (e.message.includes('evaluation exceeded')) {
                    message = `webhint did not return the result fast enough`;
                }
                else {
                    message = `Error executing script: '${e.message}'`;
                }
                message = `${message}. Please try again later, or report an issue if this problem persists.`;
                await context.report(resource, message, { severity: types_1.Severity.warning });
                debug('Error executing script', e);
                return;
            }
            if (detectedLibraries.length === 0) {
                return;
            }
            await detectAndReportVulnerableLibraries(detectedLibraries, canEvaluateScript.resource);
            return;
        };
        minimumSeverity = (context.hintOptions && context.hintOptions.severity) || 'low';
        context.on('can-evaluate::script', validateLibraries);
    }
}
NoVulnerableJavascriptLibrariesHint.meta = {
    docs: {
        category: category_1.Category.security,
        description: `This hint checks if the site is running any vulnerable library using https://snyk.io database`
    },
    id: 'no-vulnerable-javascript-libraries',
    schema: [{
            additionalProperties: false,
            properties: {
                severity: {
                    pattern: '^(low|medium|high)$',
                    type: 'string'
                }
            },
            type: 'object'
        }],
    scope: hintscope_1.HintScope.site
};
exports.default = NoVulnerableJavascriptLibrariesHint;
