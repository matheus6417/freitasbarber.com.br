"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ejs = require("ejs");
const fs = require("fs-extra");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const category_1 = require("hint/dist/src/lib/enums/category");
const logger = require("hint/dist/src/lib/utils/logging");
const utils = require('./utils');
const result_1 = require("./result");
const debug = debug_1.debug(__filename);
const getCategoryListFromResources = (resources) => {
    const categoriesArray = resources.hints.map((hint) => {
        if (hint.meta.docs && hint.meta.docs.category) {
            return hint.meta.docs.category;
        }
        return category_1.Category.other;
    });
    const categories = new Set(categoriesArray);
    return Array.from(categories);
};
const getCategoryList = (resources) => {
    if (resources) {
        return getCategoryListFromResources(resources);
    }
    const result = [];
    for (let [, value] of Object.entries(category_1.Category)) {
        if (value === 'pwa') {
            value = value.toUpperCase();
        }
        else {
            value = `${value[0].toUpperCase()}${value.substr(1)}`;
        }
        result.push(value);
    }
    return result;
};
class HTMLFormatter {
    renderFile(filename, data) {
        return new Promise((resolve, reject) => {
            ejs.renderFile(filename, data, { filename }, (err, html) => {
                if (err) {
                    return reject(err);
                }
                return resolve(html);
            });
        });
    }
    async format(problems, target = '', options = {}) {
        debug('Formatting results');
        const result = new result_1.default(target, options);
        const categoryList = getCategoryList(options.resources);
        categoryList.forEach((category) => {
            result.addCategory(category);
        });
        problems.forEach((message) => {
            result.addProblem(message);
        });
        if (options.resources) {
            options.resources.hints.forEach((hintConstructor) => {
                const categoryName = hintConstructor.meta.docs.category;
                const hintId = hintConstructor.meta.id;
                const category = result.getCategoryByName(categoryName);
                const hint = category.getHintByName(hintId);
                if (!hint) {
                    category.addHint(hintId, 'pass');
                }
            });
        }
        try {
            if (!options.noGenerateFiles) {
                result.percentage = 100;
                result.id = Date.now().toString();
                const htmlPath = path.join(__dirname, 'views', 'pages', 'report.ejs');
                const html = await this.renderFile(htmlPath, { result, utils });
                const name = target.replace(/:\/\//g, '-')
                    .replace(/:/g, '-')
                    .replace(/\./g, '-')
                    .replace(/\//g, '-')
                    .replace(/-$/, '');
                const destDir = path.join(process.cwd(), 'hint-report', name);
                const currentDir = path.join(__dirname);
                const configDir = path.join(destDir, 'config');
                await fs.remove(destDir);
                await fs.mkdirp(configDir);
                await fs.copy(path.join(currentDir, 'assets'), destDir);
                const parseCssfile = async (filePath, prefix = '../..') => {
                    const cssFile = filePath;
                    let scanCSS = await fs.readFile(cssFile, 'utf-8');
                    const urlCSSRegex = /url\(['"]?([^'")]*)['"]?\)/g;
                    scanCSS = scanCSS.replace(urlCSSRegex, (match, group) => {
                        return `url('${group[0] === '/' ? prefix : ''}${group}')`;
                    });
                    await fs.outputFile(filePath, scanCSS, { encoding: 'utf-8' });
                };
                await parseCssfile(path.join(destDir, 'styles', 'scan', 'scan-results.css'));
                await parseCssfile(path.join(destDir, 'styles', 'anchor-top.css'), '../');
                if (options.config) {
                    await fs.outputFile(path.join(configDir, result.id), JSON.stringify(options.config));
                }
                await fs.outputFile(path.join(destDir, 'index.html'), html);
            }
            return result;
        }
        catch (err) {
            logger.error(err);
            throw err;
        }
    }
}
exports.default = HTMLFormatter;
