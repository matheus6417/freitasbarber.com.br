"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const hint_helpers_1 = require("hint/dist/src/lib/utils/hint-helpers");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const is_data_uri_1 = require("hint/dist/src/lib/utils/network/is-data-uri");
const pretty_print_array_1 = require("hint/dist/src/lib/utils/misc/pretty-print-array");
const debug = debug_1.debug(__filename);
class NoHtmlOnlyHeadersHint {
    constructor(context) {
        let unneededHeaders = [
            'content-security-policy',
            'feature-policy',
            'x-content-security-policy',
            'x-frame-options',
            'x-ua-compatible',
            'x-webkit-csp',
            'x-xss-protection'
        ];
        const loadHintConfigs = () => {
            const includeHeaders = (context.hintOptions && context.hintOptions.include) || [];
            const ignoreHeaders = (context.hintOptions && context.hintOptions.ignore) || [];
            unneededHeaders = hint_helpers_1.mergeIgnoreIncludeArrays(unneededHeaders, ignoreHeaders, includeHeaders);
        };
        const willBeTreatedAsHTML = (response) => {
            const contentTypeHeader = response.headers['content-type'];
            const mediaType = contentTypeHeader ? contentTypeHeader.split(';')[0].trim() : '';
            if ([
                'text/html',
                'application/xhtml+xml'
            ].includes(mediaType)) {
                return true;
            }
            if (mediaType.indexOf('/') > 0) {
                return false;
            }
            return false;
        };
        const validate = async ({ element, resource, response }) => {
            if (is_data_uri_1.default(resource)) {
                debug(`Check does not apply for data URI: ${resource}`);
                return;
            }
            if (!willBeTreatedAsHTML(response)) {
                const headers = hint_helpers_1.getIncludedHeaders(response.headers, unneededHeaders);
                const numberOfHeaders = headers.length;
                if (numberOfHeaders > 0) {
                    const message = `Response should not include unneeded ${pretty_print_array_1.default(headers)} ${numberOfHeaders === 1 ? 'header' : 'headers'}.`;
                    await context.report(resource, message, { element });
                }
            }
        };
        loadHintConfigs();
        context.on('fetch::end::*', validate);
    }
}
NoHtmlOnlyHeadersHint.meta = {
    docs: {
        category: category_1.Category.performance,
        description: 'Disallow unneeded HTTP headers for non-HTML resources'
    },
    id: 'no-html-only-headers',
    schema: [{
            additionalProperties: false,
            definitions: {
                'string-array': {
                    items: { type: 'string' },
                    minItems: 1,
                    type: 'array',
                    uniqueItems: true
                }
            },
            properties: {
                ignore: { $ref: '#/definitions/string-array' },
                include: { $ref: '#/definitions/string-array' }
            },
            type: ['object', 'null']
        }],
    scope: hintscope_1.HintScope.site
};
exports.default = NoHtmlOnlyHeadersHint;
