"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const category_1 = require("hint/dist/src/lib/enums/category");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const load_package_1 = require("hint/dist/src/lib/utils/packages/load-package");
const config_checker_1 = require("./helpers/config-checker");
const debug = debug_1.debug(__filename);
class TypeScriptConfigImportHelpers {
    constructor(context) {
        const validate = config_checker_1.configChecker('compilerOptions.importHelpers', true, 'The compiler option "importHelpers" should be enabled to reduce the output size.', context);
        const validateTslibInstalled = async (evt) => {
            const { resource } = evt;
            const pathToTslib = path.join(process.cwd(), 'node_modules', 'tslib');
            debug(`Searching "tslib" in ${pathToTslib}`);
            try {
                load_package_1.default(pathToTslib);
                debug(`"tslib" found`);
            }
            catch (e) {
                debug(e);
                await context.report(resource, `Couldn't find package "tslib".`);
            }
        };
        context.on('parse::end::typescript-config', validate);
        context.on('parse::end::typescript-config', validateTslibInstalled);
    }
}
TypeScriptConfigImportHelpers.meta = {
    docs: {
        category: category_1.Category.development,
        description: '`typescript-config/import-helpers` checks if the property `importHelpers` is enabled in the TypeScript configuration file (i.e `tsconfig.json`) to reduce the output size.'
    },
    id: 'typescript-config/import-helpers',
    schema: [],
    scope: hintscope_1.HintScope.local
};
exports.default = TypeScriptConfigImportHelpers;
