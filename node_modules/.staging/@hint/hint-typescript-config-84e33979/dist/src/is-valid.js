"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const debug = debug_1.debug(__filename);
class TypeScriptConfigIsValid {
    constructor(context) {
        const invalidJSONFile = async (typeScriptConfigInvalid, event) => {
            const { error, resource } = typeScriptConfigInvalid;
            debug(`${event} received`);
            await context.report(resource, error.message);
        };
        const invalidSchema = async (fetchEnd) => {
            const { errors, prettifiedErrors, resource } = fetchEnd;
            debug(`parse::error::typescript-config::schema received`);
            for (let i = 0; i < errors.length; i++) {
                const message = prettifiedErrors[i];
                const location = errors[i].location;
                await context.report(resource, message, { location });
            }
        };
        context.on('parse::error::typescript-config::json', invalidJSONFile);
        context.on('parse::error::typescript-config::circular', invalidJSONFile);
        context.on('parse::error::typescript-config::extends', invalidJSONFile);
        context.on('parse::error::typescript-config::schema', invalidSchema);
    }
}
TypeScriptConfigIsValid.meta = {
    docs: {
        category: category_1.Category.development,
        description: '`typescript-config/is-valid` warns against providing an invalid TypeScript configuration file `tsconfig.json`'
    },
    id: 'typescript-config/is-valid',
    schema: [],
    scope: hintscope_1.HintScope.local
};
exports.default = TypeScriptConfigIsValid;
