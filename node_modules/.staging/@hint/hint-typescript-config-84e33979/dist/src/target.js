"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
class TypeScriptConfigTarget {
    constructor(context) {
        const Targets = new Map([
            ['es3', 'es3'],
            ['es5', 'es5'],
            ['es6', 'es2015'],
            ['es2015', 'es2015'],
            ['es2016', 'es2016'],
            ['es2017', 'es2017'],
            ['esnext', 'esnext']
        ]);
        const compatMatrix = {
            es5: {
                chrome: 5,
                edge: 12,
                firefox: 4,
                ie: 9,
                ie_mob: 9,
                opera: 44,
                safari: 5
            },
            es2015: {
                chrome: 49,
                edge: 13,
                firefox: 37,
                ie: 'none',
                ie_mob: 'none',
                opera: 44,
                safari: 10
            },
            es2016: {
                chrome: 57,
                edge: 14,
                firefox: 52,
                ie: 'none',
                ie_mob: 'none',
                opera: 44,
                safari: 10.1
            },
            es2017: {
                chrome: 58,
                edge: 16,
                firefox: 53,
                ie: 'none',
                ie_mob: 'none',
                opera: 45,
                safari: 10.1
            }
        };
        const getMajor = (version) => {
            if (typeof version === 'number') {
                return version;
            }
            return parseInt(version.split('-')[0].split('.')[0]);
        };
        const isOlder = (version1, version2) => {
            if (typeof version1 === 'number' && typeof version2 === 'number') {
                return version1 < version2;
            }
            if (typeof version1 === 'string' && typeof version2 === 'string') {
                if (version1.includes('-') || version2.includes('-')) {
                    const range1 = version1.split('-')[0];
                    const range2 = version2.split('-')[0];
                    if (range1.includes('.') && range2.includes('.')) {
                        const parts1 = range1.split('.');
                        const parts2 = range2.split('.');
                        let older = true;
                        for (let i = 0; i < parts1.length && older; i++) {
                            older = isOlder(parseInt(parts1[i]), parseInt(parts2[i]));
                        }
                        return older;
                    }
                    return isOlder(parseInt(range1), parseInt(range2));
                }
            }
            return isOlder(getMajor(version1), getMajor(version2));
        };
        const toMiniumBrowser = (targetedBrowsers) => {
            const configuration = targetedBrowsers.reduce((config, browserVersion) => {
                const [browser, strVersion] = browserVersion.split(' ');
                const version = strVersion.includes('.') || strVersion.includes('-') ? strVersion : parseInt(strVersion);
                const previousVersion = config[browser];
                if (!previousVersion || isOlder(version, previousVersion)) {
                    config[browser] = version;
                }
                return config;
            }, {});
            return configuration;
        };
        const getMaxVersion = (minimumBrowsers) => {
            const versions = Object.keys(compatMatrix);
            let maxVersion = 'es3';
            versions.forEach((version) => {
                const browsers = Object.entries(compatMatrix[version]);
                const validates = browsers.reduce((valid, [browser, minimumBrowserVersion]) => {
                    const minimumTargettedBrowserVersion = minimumBrowsers[browser];
                    if (!minimumTargettedBrowserVersion) {
                        return valid;
                    }
                    if (minimumBrowserVersion === 'none' && minimumTargettedBrowserVersion) {
                        return false;
                    }
                    const newer = !isOlder(minimumTargettedBrowserVersion, minimumBrowserVersion);
                    return valid && newer;
                }, true);
                maxVersion = validates ? version : maxVersion;
            });
            return maxVersion;
        };
        const getConfiguredTarget = (config) => {
            const target = config.compilerOptions.target;
            return Targets.get(target.toLowerCase()) || '';
        };
        const validate = async (evt) => {
            const { config, getLocation, resource } = evt;
            const { targetedBrowsers } = context;
            const target = getConfiguredTarget(config);
            const minimumBrowsers = toMiniumBrowser(targetedBrowsers);
            const maxESVersion = getMaxVersion(minimumBrowsers);
            if (maxESVersion !== target) {
                const message = `Based on your browser configuration your "compilerOptions.target" should be "${maxESVersion}". Current one is "${target}"`;
                const location = getLocation('compilerOptions.target');
                await context.report(resource, message, { location });
            }
        };
        context.on('parse::end::typescript-config', validate);
    }
}
TypeScriptConfigTarget.meta = {
    docs: {
        category: category_1.Category.development,
        description: '`typescript-config/target` warns against providing a `compilerOptions.target` in the TypeScript configuration file (i.e `tsconfig.json`) not optimized for the defined `browserslist` values.'
    },
    id: 'typescript-config/target',
    schema: [],
    scope: hintscope_1.HintScope.local
};
exports.default = TypeScriptConfigTarget;
