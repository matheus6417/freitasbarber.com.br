"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const types_1 = require("hint/dist/src/lib/types");
const read_file_async_1 = require("hint/dist/src/lib/utils/fs/read-file-async");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const debug = debug_1.debug(__filename);
class AxeHint {
    constructor(context) {
        let axeConfig = { runOnly: ['wcag2a', 'wcag2aa'] };
        const loadHintConfig = () => {
            if (!context.hintOptions) {
                return;
            }
            axeConfig = context.hintOptions;
        };
        const generateScript = () => {
            const script = `function runA11yChecks() {
    return window['axe'].run(document, ${JSON.stringify(axeConfig, null, 2)});
}`;
            return script;
        };
        const getElement = async (node) => {
            const selector = node.target[0];
            const elements = await context.querySelectorAll(selector);
            return elements[0];
        };
        const validate = async (canEvaluateScript) => {
            const { resource } = canEvaluateScript;
            const axeCore = await read_file_async_1.default(require.resolve('axe-core'));
            const script = `(function () {
    ${axeCore};
    return (${generateScript()}());
}())`;
            let result = null;
            try {
                result = await context.evaluate(script);
            }
            catch (e) {
                let message;
                if (e.message.includes('evaluation exceeded')) {
                    message = `webhint did not return the result fast enough`;
                }
                else {
                    message = `Error executing script: '${e.message}'`;
                }
                message = `${message}. Please try again later, or report an issue if this problem persists.`;
                await context.report(resource, message, { severity: types_1.Severity.warning });
                debug('Error executing script %O', e);
                return;
            }
            if (!result || !Array.isArray(result.violations)) {
                debug(`Unable to parse axe results ${result}`);
                return;
            }
            if (result.violations.length === 0) {
                debug('No accessibility issues found');
                return;
            }
            const reportPromises = result.violations.reduce((promises, violation) => {
                const elementPromises = violation.nodes.map(async (node) => {
                    const element = await getElement(node);
                    await context.report(resource, violation.help, { element });
                    return;
                });
                return promises.concat(elementPromises);
            }, []);
            await Promise.all(reportPromises);
        };
        loadHintConfig();
        context.on('can-evaluate::script', validate);
    }
}
AxeHint.meta = {
    docs: {
        category: category_1.Category.accessibility,
        description: 'Runs axe-core tests in the target'
    },
    id: 'axe',
    schema: [{
            additionalProperties: false,
            properties: {
                rules: {
                    patternProperties: {
                        '^.+$': {
                            additionalProperties: false,
                            properties: { enabled: { type: 'boolean' } },
                            required: ['enabled'],
                            type: 'object'
                        }
                    },
                    type: 'object'
                },
                runOnly: {
                    additionalProperties: false,
                    properties: {
                        type: { type: 'string' },
                        values: {
                            items: { type: 'string' },
                            minItems: 1,
                            type: 'array',
                            uniqueItems: true
                        }
                    },
                    type: 'object'
                }
            }
        }],
    scope: hintscope_1.HintScope.any
};
exports.default = AxeHint;
