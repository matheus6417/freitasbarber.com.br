"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const normalize_string_1 = require("hint/dist/src/lib/utils/misc/normalize-string");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
class ManifestExistsHint {
    constructor(context) {
        let manifestIsSpecified = false;
        const checkIfManifestWasSpecified = async (scanEndEvent) => {
            if (!manifestIsSpecified) {
                await context.report(scanEndEvent.resource, `'manifest' link element was not specified.`);
            }
        };
        const checkIfManifest = async (data) => {
            const { element, resource } = data;
            if (normalize_string_1.default(element.getAttribute('rel')) !== 'manifest') {
                return;
            }
            if (manifestIsSpecified) {
                await context.report(resource, `'manifest' link element is not needed as one was already specified.`, { element });
                return;
            }
            manifestIsSpecified = true;
            const href = normalize_string_1.default(element.getAttribute('href'));
            if (!href) {
                await context.report(resource, `'manifest' link element should have non-empty 'href' attribute.`, { element });
            }
        };
        const handleFetchErrors = async (fetchErrorEvent) => {
            const { resource, element, error } = fetchErrorEvent;
            await context.report(resource, error.message, { element });
        };
        context.on('element::link', checkIfManifest);
        context.on('fetch::error::manifest', handleFetchErrors);
        context.on('scan::end', checkIfManifestWasSpecified);
    }
}
ManifestExistsHint.meta = {
    docs: {
        category: category_1.Category.pwa,
        description: 'Require a web app manifest'
    },
    id: 'manifest-exists',
    schema: [],
    scope: hintscope_1.HintScope.any
};
exports.default = ManifestExistsHint;
