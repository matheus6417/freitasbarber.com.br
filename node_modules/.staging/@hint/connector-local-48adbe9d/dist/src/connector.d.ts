/// <reference types="node" />
import * as url from 'url';
import { IAsyncHTMLDocument, IAsyncHTMLElement } from 'hint/dist/src/lib/types/async-html';
import { IConnector, IFetchOptions, NetworkData } from 'hint/dist/src/lib/types';
import { Engine } from 'hint/dist/src/lib/engine';
import { HTMLEvents } from '@hint/parser-html';
export default class LocalConnector implements IConnector {
    private _window;
    private _options;
    private engine;
    private _href;
    private filesPattern;
    private watcher;
    constructor(engine: Engine<HTMLEvents>, config: object);
    private getFilesPattern;
    private notifyFetch;
    private fetch;
    private fetchData;
    private getGitIgnore;
    private notify;
    private watch;
    private onParseHTML;
    fetchContent(target: string, headers?: object, options?: IFetchOptions): Promise<NetworkData>;
    collect(target: url.URL, options?: IFetchOptions): Promise<void>;
    evaluate(source: string): Promise<any>;
    querySelectorAll(selector: string): Promise<IAsyncHTMLElement[]>;
    close(): Promise<void>;
    readonly dom: IAsyncHTMLDocument | undefined;
    readonly html: Promise<string>;
}
