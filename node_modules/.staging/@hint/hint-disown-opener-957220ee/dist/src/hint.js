"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const category_1 = require("hint/dist/src/lib/enums/category");
const cut_string_1 = require("hint/dist/src/lib/utils/misc/cut-string");
const normalize_string_1 = require("hint/dist/src/lib/utils/misc/normalize-string");
const is_regular_protocol_1 = require("hint/dist/src/lib/utils/network/is-regular-protocol");
const caniuse_1 = require("hint/dist/src/lib/utils/caniuse");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const pretty_print_array_1 = require("hint/dist/src/lib/utils/misc/pretty-print-array");
const debug = debug_1.debug(__filename);
class DisownOpenerHint {
    constructor(context) {
        let includeSameOriginURLs = false;
        const loadHintConfigs = () => {
            includeSameOriginURLs = (context.hintOptions && context.hintOptions.includeSameOriginURLs) || false;
        };
        const checkForRelValues = async (resource, element, relValuesToCheckFor) => {
            const relValues = normalize_string_1.default(element.getAttribute('rel'), '').split(' ');
            const hrefValue = normalize_string_1.default(element.getAttribute('href')) || '';
            const requiredValues = relValuesToCheckFor.filter((value) => {
                return !relValues.includes(value);
            });
            if (requiredValues.length !== 0) {
                const message = `'${cut_string_1.default(await element.outerHTML(), 100)}' should have 'rel' attribute value include ${pretty_print_array_1.default(requiredValues)} ${requiredValues.length === 1 ? 'keyword' : 'keywords'}.`;
                await context.report(resource, message, { content: hrefValue, element });
            }
        };
        const checkSameOrigin = (resource, element) => {
            const hrefValue = normalize_string_1.default(element.getAttribute('href')) || '';
            try {
                const fullURL = new url_1.URL(hrefValue, resource).href;
                if ((new url_1.URL(resource).origin === new url_1.URL(fullURL).origin) && !includeSameOriginURLs) {
                    debug('Is same origin');
                    return false;
                }
                return true;
            }
            catch (e) {
                debug(e);
                return true;
            }
        };
        const hasHrefValue = (element) => {
            if (normalize_string_1.default(element.getAttribute('href')) !== null) {
                return true;
            }
            debug(`'href' is not specified`);
            return false;
        };
        const elementHrefHasRequiredProtocol = (element) => {
            const hrefValue = element.getAttribute('href') || '';
            return is_regular_protocol_1.default(hrefValue);
        };
        const hasTargetBlank = (element) => {
            if (normalize_string_1.default(element.getAttribute('target')) === '_blank') {
                return true;
            }
            debug('No `target="_blank"` found');
            return false;
        };
        const validate = async ({ element, resource }) => {
            if (!hasTargetBlank(element) ||
                !hasHrefValue(element) ||
                !elementHrefHasRequiredProtocol(element) ||
                !checkSameOrigin(resource, element)) {
                return;
            }
            const targetedBrowsers = context.targetedBrowsers.join();
            const relValuesToCheckFor = ['noopener'];
            if (!targetedBrowsers || !caniuse_1.isSupported('rel-noopener', targetedBrowsers)) {
                relValuesToCheckFor.push('noreferrer');
            }
            await checkForRelValues(resource, element, relValuesToCheckFor);
        };
        loadHintConfigs();
        context.on('element::a', validate);
        context.on('element::area', validate);
    }
}
DisownOpenerHint.meta = {
    docs: {
        category: category_1.Category.security,
        description: 'Require `noopener` (and `noreferrer`) on `a` and `area` element with target="_blank"'
    },
    id: 'disown-opener',
    schema: [{
            additionalProperties: false,
            properties: { includeSameOriginURLs: { type: 'boolean' } },
            type: ['object', 'null']
        }],
    scope: hintscope_1.HintScope.any
};
exports.default = DisownOpenerHint;
