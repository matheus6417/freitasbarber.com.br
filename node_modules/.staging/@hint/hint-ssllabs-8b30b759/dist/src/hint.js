"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const category_1 = require("hint/dist/src/lib/enums/category");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const types_1 = require("./types");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
const debug = debug_1.debug(__filename);
class SSLLabsHint {
    constructor(context) {
        let promise;
        let minimumGrade = 'A-';
        let scanOptions = {
            all: 'done',
            fromCache: true,
            host: '',
            maxAge: 2
        };
        let failed = false;
        const loadHintConfig = () => {
            minimumGrade = (context.hintOptions && context.hintOptions.grade) || 'A-';
            const userSslOptions = (context.hintOptions && context.hintOptions.ssllabs) || {};
            scanOptions = Object.assign(scanOptions, userSslOptions);
        };
        const verifyEndpoint = async (resource, { grade, serverName = resource, details }) => {
            if (!grade && details.protocols.length === 0) {
                const message = `'${resource}' does not support HTTPS.`;
                debug(message);
                await context.report(resource, message);
                return;
            }
            const calculatedGrade = types_1.Grades[grade];
            const calculatedMiniumGrade = types_1.Grades[minimumGrade];
            if (calculatedGrade > calculatedMiniumGrade) {
                const message = `${serverName}'s grade ${grade} does not meet the minimum ${minimumGrade} required.`;
                debug(message);
                await context.report(resource, message);
            }
            else {
                debug(`Grade ${grade} for ${resource} is ok.`);
            }
        };
        const notifyError = async (resource, error) => {
            debug(`Error getting data for ${resource} %O`, error);
            await context.report(resource, `Could not get results from SSL Labs for '${resource}'.`);
        };
        const start = async ({ resource }) => {
            if (!resource.startsWith('https://')) {
                const message = `'${resource}' does not support HTTPS.`;
                debug(message);
                await context.report(resource, message);
                return;
            }
            const ssl = await Promise.resolve().then(() => require('node-ssllabs'));
            const ssllabs = util_1.promisify(ssl.scan);
            debug(`Starting SSL Labs scan for ${resource}`);
            scanOptions.host = resource;
            promise = ssllabs(scanOptions)
                .catch(async (error) => {
                failed = true;
                await notifyError(resource, error);
            });
        };
        const end = async ({ resource }) => {
            if (!promise || failed) {
                return;
            }
            debug(`Waiting for SSL Labs results for ${resource}`);
            let host;
            try {
                host = await promise;
            }
            catch (e) {
                notifyError(resource, e);
                return;
            }
            debug(`Received SSL Labs results for ${resource}`);
            if (!host || !host.endpoints || host.endpoints.length === 0) {
                const msg = `Didn't get any result for ${resource}.
There might be something wrong with SSL Labs servers.`;
                debug(msg);
                await context.report(resource, msg);
                return;
            }
            for (const endpoint of host.endpoints) {
                await verifyEndpoint(resource, endpoint);
            }
        };
        loadHintConfig();
        context.on('fetch::end::html', start);
        context.on('scan::end', end);
    }
}
SSLLabsHint.meta = {
    docs: {
        category: category_1.Category.security,
        description: 'Strength of your SSL configuration'
    },
    id: 'ssllabs',
    schema: [{
            additionalProperties: false,
            properties: {
                grade: {
                    pattern: '^(A\\+|A\\-|[A-F]|T|M)$',
                    type: 'string'
                },
                ssllabs: {
                    properties: {
                        all: {
                            pattern: '^(on|done)$',
                            type: 'string'
                        },
                        fromCache: { type: 'boolean' },
                        ignoreMismatch: { type: 'boolean' },
                        maxAge: {
                            minimum: 0,
                            type: 'integer'
                        },
                        publish: { type: 'boolean' },
                        startNew: { type: 'boolean' }
                    },
                    type: 'object'
                }
            },
            type: 'object'
        }],
    scope: hintscope_1.HintScope.site
};
exports.default = SSLLabsHint;
