"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const util_1 = require("util");
const zlib = require("zlib");
const async = require("async");
const brotli = require("iltorb");
const request = require("request");
const iconv = require("iconv-lite");
const parseDataURL = require("data-urls");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const normalized_header_value_1 = require("hint/dist/src/lib/utils/network/normalized-header-value");
const to_lowercase_keys_1 = require("hint/dist/src/lib/utils/misc/to-lowercase-keys");
const content_type_1 = require("hint/dist/src/lib/utils/content-type");
const redirects_1 = require("./redirects");
const debug = debug_1.debug(__filename);
const decompressBrotli = util_1.promisify(brotli.decompress);
const decompressGzip = util_1.promisify(zlib.gunzip);
const inflateAsync = util_1.promisify(zlib.inflate);
const inflateRawAsync = util_1.promisify(zlib.inflateRaw);
const inflate = (buff) => {
    if ((buff[0] & 0x0f) === 8 && (buff.readUInt16BE(0) % 31 === 0)) {
        return inflateAsync(buff);
    }
    return inflateRawAsync(buff);
};
const identity = (buff) => {
    return Promise.resolve(Buffer.from(buff));
};
const asyncSome = util_1.promisify(async.someSeries);
const defaults = {
    encoding: null,
    followRedirect: false,
    headers: {
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.8,es;q=0.6,fr;q=0.4',
        'Cache-Control': 'no-cache',
        DNT: 1,
        Pragma: 'no-cache',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'
    },
    jar: true,
    time: true,
    timeout: 10000
};
class Requester {
    constructor(customOptions) {
        this._redirects = new redirects_1.RedirectManager();
        this._maxRedirects = 10;
        if (customOptions) {
            customOptions.followRedirect = false;
            customOptions.rejectUnauthorized = false;
            this._maxRedirects = customOptions.maxRedirects || this._maxRedirects;
            if (customOptions.headers) {
                customOptions.headers = Object.assign({}, to_lowercase_keys_1.default(defaults.headers), to_lowercase_keys_1.default(customOptions.headers));
            }
        }
        const options = Object.assign({}, defaults, customOptions);
        this._options = options;
        this._request = request.defaults(options);
    }
    async tryToDecompress(decompressor, content) {
        try {
            const result = await decompressor(content);
            return result;
        }
        catch (e) {
            return null;
        }
    }
    decompressors(algorithm) {
        const priorities = {
            br: 0,
            gzip: 1,
            deflate: 2,
            identity: 3
        };
        const functions = [
            decompressBrotli,
            decompressGzip,
            inflate,
            identity
        ];
        const priority = typeof priorities[algorithm.trim()] === 'undefined' ?
            priorities.identity :
            priorities[algorithm];
        return functions.slice(priority);
    }
    async decompressResponse(contentEncoding, rawBodyResponse) {
        const that = this;
        const algorithms = contentEncoding ?
            contentEncoding.split(',') :
            [''];
        const decompressors = this.decompressors(algorithms.shift().trim());
        let rawBody = null;
        await asyncSome(decompressors, async (decompressor) => {
            rawBody = await that.tryToDecompress(decompressor, rawBodyResponse);
            return !!rawBody;
        });
        if (rawBody && algorithms.length > 0) {
            return this.decompressResponse(algorithms.join(','), rawBody);
        }
        return rawBody;
    }
    getRedirects(uri) {
        return this._redirects.calculate(uri);
    }
    getResourceNetworkDataFromDataUri(uri) {
        const parsedDataURL = parseDataURL(uri);
        const networkData = {
            request: {
                headers: {},
                url: uri
            },
            response: {
                body: {
                    content: parsedDataURL.body,
                    rawContent: parsedDataURL.body,
                    rawResponse: () => {
                        return Promise.resolve(parsedDataURL.body);
                    }
                },
                charset: parsedDataURL.mimeType.parameters.get('charset') || '',
                headers: {},
                hops: [],
                mediaType: parsedDataURL.mimeType.toString(),
                statusCode: 200,
                url: uri
            }
        };
        return networkData;
    }
    get(uri) {
        debug(`Requesting ${uri}`);
        if (uri.startsWith('data:')) {
            return Promise.resolve(this.getResourceNetworkDataFromDataUri(uri));
        }
        const requestedUrls = new Set();
        const getUri = (uriString) => {
            requestedUrls.add(uriString);
            return new Promise((resolve, reject) => {
                const byteChunks = [];
                let rawBodyResponse;
                this._request({ uri: uriString }, async (err, response) => {
                    if (err) {
                        debug(`Request for ${uriString} failed\n${err}`);
                        return reject({
                            error: err,
                            uri: uriString
                        });
                    }
                    if (Requester.validRedirects.includes(response.statusCode)) {
                        if (!response.headers.location) {
                            return reject({
                                error: new Error('Redirect location undefined'),
                                uri: uriString
                            });
                        }
                        const newUri = url.resolve(uriString, response.headers.location);
                        if (requestedUrls.has(newUri)) {
                            return reject(`'${uriString}' could not be fetched using ${this._options.method || 'GET'} method (redirect loop detected).`);
                        }
                        this._redirects.add(newUri, uriString);
                        const currentRedirectNumber = this._redirects.calculate(newUri).length;
                        if (currentRedirectNumber > this._maxRedirects) {
                            return reject(`The number of redirects(${currentRedirectNumber}) exceeds the limit(${this._maxRedirects}).`);
                        }
                        try {
                            debug(`Redirect found for ${uriString}`);
                            const results = await getUri(newUri);
                            return resolve(results);
                        }
                        catch (e) {
                            return reject(e);
                        }
                    }
                    const contentEncoding = normalized_header_value_1.default(response.headers, 'content-encoding');
                    const rawBody = await this.decompressResponse(contentEncoding, rawBodyResponse);
                    const contentTypeData = content_type_1.getContentTypeData(null, uri, response.headers, rawBody);
                    const charset = contentTypeData.charset || '';
                    const mediaType = contentTypeData.mediaType || '';
                    const hops = this._redirects.calculate(uriString);
                    const body = rawBody && iconv.encodingExists(charset) ? iconv.decode(rawBody, charset) : null;
                    const networkData = {
                        request: {
                            headers: response.request.headers,
                            url: hops[0] || uriString
                        },
                        response: {
                            body: {
                                content: body,
                                rawContent: rawBody,
                                rawResponse: () => {
                                    return Promise.resolve(rawBodyResponse);
                                }
                            },
                            charset,
                            headers: response.headers,
                            hops,
                            mediaType,
                            statusCode: response.statusCode,
                            url: uriString
                        }
                    };
                    return resolve(networkData);
                })
                    .on('response', (response) => {
                    response
                        .on('data', (data) => {
                        byteChunks.push(data);
                    })
                        .on('end', () => {
                        rawBodyResponse = Buffer.concat(byteChunks);
                    });
                });
            });
        };
        return getUri(uri);
    }
}
Requester.validRedirects = [301, 302, 303, 307, 308];
exports.Requester = Requester;
