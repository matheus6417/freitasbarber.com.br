"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
class StylesheetLimitsHint {
    constructor(context) {
        const options = context.hintOptions;
        const includesOldIE = ['ie 6', 'ie 7', 'ie 8', 'ie 9'].some((e) => {
            return context.targetedBrowsers.includes(e);
        });
        if (!options && !includesOldIE) {
            return;
        }
        let hasImportLimit = includesOldIE;
        let hasRuleLimit = includesOldIE;
        let hasSheetLimit = includesOldIE;
        let maxImports = includesOldIE ? 4 : 0;
        let maxRules = includesOldIE ? 4095 : 0;
        let maxSheets = includesOldIE ? 31 : 0;
        if (options) {
            if (options.maxImports && (!hasImportLimit || options.maxImports < maxImports)) {
                maxImports = options.maxImports;
                hasImportLimit = true;
            }
            if (options.maxRules && (!hasRuleLimit || options.maxRules < maxRules)) {
                maxRules = options.maxRules;
                hasRuleLimit = true;
            }
            if (options.maxSheets && (!hasSheetLimit || options.maxSheets < maxSheets)) {
                maxSheets = options.maxSheets;
                hasSheetLimit = true;
            }
        }
        const injectedCode = function () {
            const countRules = (styleSheet) => {
                const results = {
                    imports: 0,
                    rules: 0,
                    sheets: 1
                };
                try {
                    Array.from(styleSheet.cssRules).forEach((rule) => {
                        if (rule instanceof CSSStyleRule) {
                            results.rules += rule.selectorText.split(',').length;
                        }
                        else if (rule instanceof CSSImportRule) {
                            const subResults = countRules(rule.styleSheet);
                            results.imports += Math.max(results.imports, subResults.imports + 1);
                            results.rules += subResults.rules + 1;
                            results.sheets += subResults.sheets;
                        }
                        else {
                            results.rules += 1;
                        }
                    });
                }
                catch (e) {
                }
                return results;
            };
            const combinedResults = {
                imports: 0,
                rules: 0,
                sheets: 0
            };
            Array.from(document.styleSheets).forEach((sheet) => {
                if (sheet instanceof CSSStyleSheet) {
                    const subResults = countRules(sheet);
                    combinedResults.imports += Math.max(combinedResults.imports, subResults.imports);
                    combinedResults.rules += subResults.rules;
                    combinedResults.sheets += subResults.sheets;
                }
            });
            return combinedResults;
        };
        const validateScanEnd = async (event) => {
            const results = await context.evaluate(`(${injectedCode})()`);
            if (hasImportLimit && results.imports >= maxImports) {
                await context.report(event.resource, `Maximum of ${maxImports} nested imports reached (${results.imports})`);
            }
            if (hasRuleLimit && results.rules >= maxRules) {
                await context.report(event.resource, `Maximum of ${maxRules} CSS rules reached (${results.rules})`);
            }
            if (hasSheetLimit && results.sheets >= maxSheets) {
                await context.report(event.resource, `Maximum of ${maxSheets} stylesheets reached (${results.sheets})`);
            }
        };
        context.on('can-evaluate::script', validateScanEnd);
    }
}
StylesheetLimitsHint.meta = {
    docs: {
        category: category_1.Category.interoperability,
        description: `Checks if CSS exceeds known stylesheet limits.`
    },
    id: 'stylesheet-limits',
    schema: [{
            additionalProperties: false,
            definitions: {
                number: {
                    minimum: 0,
                    type: 'integer'
                }
            },
            properties: {
                maxImports: { $ref: '#/definitions/number' },
                maxRules: { $ref: '#/definitions/number' },
                maxSheets: { $ref: '#/definitions/number' }
            },
            type: ['object', 'null']
        }],
    scope: hintscope_1.HintScope.site
};
exports.default = StylesheetLimitsHint;
