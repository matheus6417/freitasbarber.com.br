"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const lodash_1 = require("lodash");
const logSymbols = require("log-symbols");
const table = require("text-table");
const cut_string_1 = require("hint/dist/src/lib/utils/misc/cut-string");
const debug_1 = require("hint/dist/src/lib/utils/debug");
const types_1 = require("hint/dist/src/lib/types");
const logger = require("hint/dist/src/lib/utils/logging");
const _ = {
    forEach: lodash_1.forEach,
    groupBy: lodash_1.groupBy,
    sortBy: lodash_1.sortBy
};
const debug = debug_1.debug(__filename);
const printPosition = (position, text) => {
    if (position === -1) {
        return '';
    }
    return `${text} ${position}`;
};
class StylishFormatter {
    format(messages) {
        debug('Formatting results');
        if (messages.length === 0) {
            return;
        }
        const resources = _.groupBy(messages, 'resource');
        let totalErrors = 0;
        let totalWarnings = 0;
        _.forEach(resources, (msgs, resource) => {
            let warnings = 0;
            let errors = 0;
            const sortedMessages = _.sortBy(msgs, ['location.line', 'location.column']);
            const tableData = [];
            let hasPosition = false;
            logger.log(chalk_1.default.cyan(`${cut_string_1.default(resource, 80)}`));
            _.forEach(sortedMessages, (msg) => {
                const severity = types_1.Severity.error === msg.severity ? chalk_1.default.red('Error') : chalk_1.default.yellow('Warning');
                if (types_1.Severity.error === msg.severity) {
                    errors++;
                }
                else {
                    warnings++;
                }
                const line = printPosition(msg.location.line, 'line');
                const column = printPosition(msg.location.column, 'col');
                if (line) {
                    hasPosition = true;
                }
                tableData.push([line, column, severity, msg.message, msg.hintId]);
            });
            if (!hasPosition) {
                tableData.forEach((row) => {
                    row.splice(0, 2);
                });
            }
            logger.log(table(tableData));
            const color = errors > 0 ? chalk_1.default.red : chalk_1.default.yellow;
            totalErrors += errors;
            totalWarnings += warnings;
            logger.log(color.bold(`${logSymbols.error} Found ${errors} ${errors === 1 ? 'error' : 'errors'} and ${warnings} ${warnings === 1 ? 'warning' : 'warnings'}`));
            logger.log('');
        });
        const color = totalErrors > 0 ? chalk_1.default.red : chalk_1.default.yellow;
        logger.log(color.bold(`${logSymbols.error} Found a total of ${totalErrors} ${totalErrors === 1 ? 'error' : 'errors'} and ${totalWarnings} ${totalWarnings === 1 ? 'warning' : 'warnings'}`));
    }
}
exports.default = StylishFormatter;
