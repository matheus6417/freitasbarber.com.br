"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const category_1 = require("hint/dist/src/lib/enums/category");
const file_extension_1 = require("hint/dist/src/lib/utils/fs/file-extension");
const normalize_string_1 = require("hint/dist/src/lib/utils/misc/normalize-string");
const hintscope_1 = require("hint/dist/src/lib/enums/hintscope");
class ManifestFileExtensionHint {
    constructor(context) {
        const standardManifestFileExtension = 'webmanifest';
        const validate = async ({ element, resource }) => {
            if (normalize_string_1.default(element.getAttribute('rel')) === 'manifest') {
                const fileExtension = file_extension_1.default(normalize_string_1.default(element.getAttribute('href')) || '');
                if (fileExtension !== standardManifestFileExtension) {
                    const message = `Web app manifest should have the filename extension '${standardManifestFileExtension}'${fileExtension ? `, not '${fileExtension}'` : ''}.`;
                    await context.report(resource, message, { content: fileExtension, element });
                }
            }
        };
        context.on('element::link', validate);
    }
}
ManifestFileExtensionHint.meta = {
    docs: {
        category: category_1.Category.pwa,
        description: 'Require `.webmanifest` as the file extension for the web app manifest file'
    },
    id: 'manifest-file-extension',
    schema: [],
    scope: hintscope_1.HintScope.any
};
exports.default = ManifestFileExtensionHint;
